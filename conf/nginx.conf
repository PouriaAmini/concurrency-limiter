daemon         off;

error_log stderr;

events {
}

http {
    # Lua configuration
    lua_package_path    "$prefix/?.lua;;";
    lua_shared_dict     limit_conn_store    10M;
    lua_shared_dict     prometheus_metrics  10M;

    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics");
        metric_ifr = prometheus:gauge(
            "nginx_inflight_requests", "Number of in-flight requests");

        props = {
            initial_concurrency_limit = 15,
            min_concurrency_limit = 10,
            max_concurrency_limit = 25,
            limit_shm = "limit_conn_store",
            latency_props = {
                window_size = 1,
                min_requests = 2,
                metric = "average"
            },
            algo_props = {
                timeout = 2.5,
                backoff_factor = 0.75;
            }
        }
        aimd, err = require("aimd").new(props)
        aimd:start();
    }

    server {
        listen 9145;
        location /metrics {
            content_by_lua_block {
                prometheus:collect()
            }
        }
    }

    server {
        listen 8000;
        location / {
            access_by_lua_block {
                local allowed, err = aimd:incoming()
                if not allowed then
                    ngx.status = ngx.HTTP_REQUEST_TIMEOUT
                    ngx.say("Too many requests")
                    return ngx.exit(ngx.status)
                end

                local ctx = ngx.ctx
                ctx.allowed = true
            }

            proxy_pass http://localhost:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            log_by_lua_block {
                local ctx = ngx.ctx
                local allowed = ctx.allowed

                if allowed then
                    local latency = tonumber(ngx.var.request_time)
                    local conn, err = aimd:leaving(latency)
                    if not conn then
                        ngx.log(ngx.ERR,
                                "failed to record the connection leaving ",
                                "request: ", err)
                        return
                    end
                end
                metric_ifr:set(ngx.shared.limit_conn_store:get("ifr"));
            }
        }
    }
}
